--
-- PostgreSQL database dump
--

-- Dumped from database version 17.4
-- Dumped by pg_dump version 17.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: content_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.content_type AS ENUM (
    'news',
    'event',
    'festival'
);


ALTER TYPE public.content_type OWNER TO postgres;

--
-- Name: media_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.media_type AS ENUM (
    'image',
    'video',
    'pdf'
);


ALTER TYPE public.media_type OWNER TO postgres;

--
-- Name: role_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.role_type AS ENUM (
    'teacher',
    'child',
    'employee',
    'parent',
    'applicant'
);


ALTER TYPE public.role_type OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: child_parent; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.child_parent (
    id integer NOT NULL,
    id_parent integer NOT NULL,
    id_child integer NOT NULL
);


ALTER TABLE public.child_parent OWNER TO postgres;

--
-- Name: child_parent_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.child_parent_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.child_parent_id_seq OWNER TO postgres;

--
-- Name: child_parent_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.child_parent_id_seq OWNED BY public.child_parent.id;


--
-- Name: content_item; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.content_item (
    id integer NOT NULL,
    name text NOT NULL,
    short_description text NOT NULL,
    full_description text NOT NULL,
    type public.content_type NOT NULL,
    is_active boolean DEFAULT false NOT NULL
);


ALTER TABLE public.content_item OWNER TO postgres;

--
-- Name: content_item_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.content_item_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.content_item_id_seq OWNER TO postgres;

--
-- Name: content_item_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.content_item_id_seq OWNED BY public.content_item.id;


--
-- Name: group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."group" (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    short_description text NOT NULL,
    full_description text NOT NULL,
    is_active boolean DEFAULT false NOT NULL
);


ALTER TABLE public."group" OWNER TO postgres;

--
-- Name: group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.group_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.group_id_seq OWNER TO postgres;

--
-- Name: group_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.group_id_seq OWNED BY public."group".id;


--
-- Name: media; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.media (
    id integer NOT NULL,
    related_table character varying(50),
    related_id integer,
    type public.media_type NOT NULL,
    file_path text NOT NULL,
    description text NOT NULL,
    uploaded_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.media OWNER TO postgres;

--
-- Name: media_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.media_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.media_id_seq OWNER TO postgres;

--
-- Name: media_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.media_id_seq OWNED BY public.media.id;


--
-- Name: media_with_content_item; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.media_with_content_item AS
 SELECT m.id,
    m.related_table,
    m.related_id,
    m.type,
    m.file_path,
    m.description,
    m.uploaded_at,
    c.name AS content_name,
    c.short_description,
    c.type AS content_type
   FROM (public.media m
     JOIN public.content_item c ON ((((m.related_table)::text = 'content_item'::text) AND (m.related_id = c.id))));


ALTER VIEW public.media_with_content_item OWNER TO postgres;

--
-- Name: media_with_group; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.media_with_group AS
 SELECT m.id,
    m.related_table,
    m.related_id,
    m.type,
    m.file_path,
    m.description,
    m.uploaded_at,
    g.name AS group_name,
    g.short_description
   FROM (public.media m
     JOIN public."group" g ON ((((m.related_table)::text = 'group'::text) AND (m.related_id = g.id))));


ALTER VIEW public.media_with_group OWNER TO postgres;

--
-- Name: person; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.person (
    id integer NOT NULL,
    name character varying(50) NOT NULL,
    lastname character varying(50),
    id_group integer,
    phone_number character varying(45) NOT NULL,
    role public.role_type NOT NULL,
    is_active boolean DEFAULT false NOT NULL,
    vacancy_id integer,
    surname character varying(50) NOT NULL
);


ALTER TABLE public.person OWNER TO postgres;

--
-- Name: media_with_person; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.media_with_person AS
 SELECT m.id,
    m.related_table,
    m.related_id,
    m.type,
    m.file_path,
    m.description,
    m.uploaded_at,
    p.name AS person_name,
    p.surname,
    p.lastname,
    p.phone_number
   FROM (public.media m
     JOIN public.person p ON ((((m.related_table)::text = 'person'::text) AND (m.related_id = p.id))));


ALTER VIEW public.media_with_person OWNER TO postgres;

--
-- Name: person_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.person_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.person_id_seq OWNER TO postgres;

--
-- Name: person_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.person_id_seq OWNED BY public.person.id;


--
-- Name: vacancy; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.vacancy (
    id integer NOT NULL,
    name text NOT NULL,
    long_description text NOT NULL,
    is_active boolean DEFAULT false NOT NULL
);


ALTER TABLE public.vacancy OWNER TO postgres;

--
-- Name: vacancy_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.vacancy_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.vacancy_id_seq OWNER TO postgres;

--
-- Name: vacancy_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.vacancy_id_seq OWNED BY public.vacancy.id;


--
-- Name: view_children_with_parents; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.view_children_with_parents AS
 SELECT child.id AS child_id,
    child.name AS child_name,
    child.surname AS child_surname,
    child.lastname AS child_lastname,
    child.phone_number AS child_phone,
    parent.id AS parent_id,
    parent.name AS parent_name,
    parent.surname AS parent_surname,
    parent.lastname AS parent_lastname,
    parent.phone_number AS parent_phone
   FROM ((public.person child
     JOIN public.child_parent ON ((child.id = child_parent.id_child)))
     JOIN public.person parent ON ((parent.id = child_parent.id_parent)))
  WHERE ((child.role = 'child'::public.role_type) AND (parent.role = 'parent'::public.role_type));


ALTER VIEW public.view_children_with_parents OWNER TO postgres;

--
-- Name: view_employee; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.view_employee AS
 SELECT id,
    name,
    surname,
    lastname,
    phone_number,
    role,
    id_group,
    is_active,
    vacancy_id
   FROM public.person
  WHERE (role = ANY (ARRAY['employee'::public.role_type, 'teacher'::public.role_type]));


ALTER VIEW public.view_employee OWNER TO postgres;

--
-- Name: child_parent id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.child_parent ALTER COLUMN id SET DEFAULT nextval('public.child_parent_id_seq'::regclass);


--
-- Name: content_item id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_item ALTER COLUMN id SET DEFAULT nextval('public.content_item_id_seq'::regclass);


--
-- Name: group id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."group" ALTER COLUMN id SET DEFAULT nextval('public.group_id_seq'::regclass);


--
-- Name: media id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.media ALTER COLUMN id SET DEFAULT nextval('public.media_id_seq'::regclass);


--
-- Name: person id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.person ALTER COLUMN id SET DEFAULT nextval('public.person_id_seq'::regclass);


--
-- Name: vacancy id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vacancy ALTER COLUMN id SET DEFAULT nextval('public.vacancy_id_seq'::regclass);


--
-- Data for Name: child_parent; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.child_parent (id, id_parent, id_child) FROM stdin;
\.


--
-- Data for Name: content_item; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.content_item (id, name, short_description, full_description, type, is_active) FROM stdin;
1	песни-пляски	фестиваль народных танцев и частушек	Длинное описание, как это круто и где это проходит	festival	t
2	Победа!	наш коллектив выиграл в конкурсе!	29 мая состоялось великое событие, мы не знаем, что было, но они выиграли	news	t
3	крутое название	классное превью	Невероятно подробное описание крутого события	event	t
4	фестиваль крутых мальчиков	Выбираем самого сигма бойчика из всех	Приглашаем мальчиков до 10 лет посоревноваться друг с другом и вообще крутыми побыть	festival	t
5	День города!	Наш любимый город N	В это воскресенье на главной площади все жители поздравляли свой любимый город с  120 днём рождения	news	t
6	Новый кружок	В нашем ДК открылся новый танцевальный клуб	Новый танцевальный клуб позволит детям попробовать себя в новых стилях танцев, таких как брейк, что-нибудь и что-то	news	t
\.


--
-- Data for Name: group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."group" (id, name, short_description, full_description, is_active) FROM stdin;
1	Урашечки	танцевальный коллектив для дошкольников	У нас большая история, но пока просто тест	t
2	актерчики	актерский для самых маленьких	Мы недавно открылись тутуту	t
3	распевон	давно-давно поем	история долгая, пока в инактиве	f
4	Смешарики	кружок художественной гимнастики	делаем сальто, колесо и другие трюки, названия которых я не знаю	t
\.


--
-- Data for Name: media; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.media (id, related_table, related_id, type, file_path, description, uploaded_at) FROM stdin;
2	person	1	image	uploads/persons/MMGutova.jpg	М.М. Гутова фото	2025-06-02 11:44:03.19001
3	content_item	2	image	uploads/news/victory.jpg	Награда победителей	2025-06-02 18:37:31.543965
4	content_item	1	image	uploads/festivals/bibaboba.jpg	превью фестиваль	2025-06-02 18:59:23.461007
5	content_item	3	image	uploads/events/leg.jpg	превью мероприятие	2025-06-02 18:59:23.461007
1	group	1	image	uploads/groups/lenya.jpg	test	2025-06-02 11:01:12.145869
6	group	2	image	uploads/groups/gr2.jpg	logo gr2	2025-06-03 21:02:02.320524
7	\N	\N	pdf	uploads/docs/info/test.pdf	нормативный документ 1	2025-06-05 17:29:13.28565
8	content_item	1	pdf	uploads/docs/rules/fest1/rules_fest1_2025.pdf	Правила фестиваля 1	2025-06-05 18:04:42.012797
9	content_item	1	pdf	uploads/docs/rules/fest1/rules_fest1_2024.pdf	Правила фестиваля 1 2024	2025-06-05 18:04:42.012797
10	content_item	4	pdf	uploads/docs/rules/fest2/rules_fest2_2025.pdf	Правила фестиваля 2 2025	2025-06-05 18:04:42.012797
\.


--
-- Data for Name: person; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.person (id, name, lastname, id_group, phone_number, role, is_active, vacancy_id, surname) FROM stdin;
1	Марина	Михайловна	1	89998887766	teacher	t	9	Гутова
2	Пётр	Иванович	\N	89345677733	employee	t	1	Куйбышев
\.


--
-- Data for Name: vacancy; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.vacancy (id, name, long_description, is_active) FROM stdin;
1	Директор	Руководство домом культуры. Организация и контроль деятельности.	f
2	Заместитель директора	Координация мероприятий и внутренних процессов.	f
3	Администратор	Контактное лицо по общим вопросам, расписанию и аренде залов.	f
4	Методист	Составление и методическое сопровождение программ.	t
5	Художественный руководитель	Ответственный за творческую программу и качество мероприятий.	f
6	Ответственный за приём заявлений	Обработка заявок, заявлений и обратной связи от посетителей.	f
7	Бухгалтер	Ведение финансовой отчётности и справок по оплате.	f
8	Преподаватель театрального кружка	Ведение занятий по актёрскому мастерству.	f
9	Преподаватель хореографии	Обучение танцам различных направлений.	f
10	Преподаватель вокала	Занятия по сольному и хоровому пению.	f
11	Преподаватель ИЗО	Обучение детей и взрослых рисованию и живописи.	t
12	Преподаватель прикладного творчества	Занятия по декоративно-прикладному искусству.	t
13	Преподаватель музыки	Индивидуальные и групповые уроки игры на инструментах.	f
14	Звукооператор	Настройка и сопровождение звука во время мероприятий.	t
15	Светооператор	Работа с осветительным оборудованием.	t
16	Костюмер	Ответственный за сценические костюмы и их подготовку.	f
17	Комендант здания	Контроль состояния помещений и обеспечение порядка.	f
18	Технический специалист	Поддержка оборудования, компьютеров, сайта.	f
\.


--
-- Name: child_parent_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.child_parent_id_seq', 1, false);


--
-- Name: content_item_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.content_item_id_seq', 6, true);


--
-- Name: group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.group_id_seq', 4, true);


--
-- Name: media_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.media_id_seq', 10, true);


--
-- Name: person_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.person_id_seq', 2, true);


--
-- Name: vacancy_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.vacancy_id_seq', 18, true);


--
-- Name: child_parent child_parent_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.child_parent
    ADD CONSTRAINT child_parent_pkey PRIMARY KEY (id);


--
-- Name: content_item content_item_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_item
    ADD CONSTRAINT content_item_pkey PRIMARY KEY (id);


--
-- Name: group group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."group"
    ADD CONSTRAINT group_pkey PRIMARY KEY (id);


--
-- Name: media media_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.media
    ADD CONSTRAINT media_pkey PRIMARY KEY (id);


--
-- Name: person person_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.person
    ADD CONSTRAINT person_pkey PRIMARY KEY (id);


--
-- Name: vacancy vacancy_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vacancy
    ADD CONSTRAINT vacancy_pkey PRIMARY KEY (id);


--
-- Name: child_parent child_parent_id_child_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.child_parent
    ADD CONSTRAINT child_parent_id_child_fkey FOREIGN KEY (id_child) REFERENCES public.person(id);


--
-- Name: child_parent child_parent_id_parent_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.child_parent
    ADD CONSTRAINT child_parent_id_parent_fkey FOREIGN KEY (id_parent) REFERENCES public.person(id);


--
-- Name: person fk_person_group; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.person
    ADD CONSTRAINT fk_person_group FOREIGN KEY (id_group) REFERENCES public."group"(id);


--
-- Name: person fk_person_vacancy; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.person
    ADD CONSTRAINT fk_person_vacancy FOREIGN KEY (vacancy_id) REFERENCES public.vacancy(id);


--
-- PostgreSQL database dump complete
--

